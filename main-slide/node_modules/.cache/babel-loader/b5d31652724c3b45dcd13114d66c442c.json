{"ast":null,"code":"import axios from 'axios';\nexport const listTweets = () => async dispatch => {\n  try {\n    dispatch({\n      type: 'TWEET_LIST_REQUEST'\n    });\n    const {\n      data\n    } = await axios.get(`https://baylor-board.herokuapp.com/tweets`);\n    dispatch({\n      type: 'TWEET_LIST_SUCCESS',\n      payload: data.tweets\n    });\n  } catch (error) {\n    dispatch({\n      type: 'TWEET_LIST_FAIL',\n      payload: error.response && error.response.data.message ? error.response.data.message : error.message\n    });\n  }\n};\nexport const login = ({\n  emailAddress,\n  password\n}) => async dispatch => {\n  try {\n    dispatch({\n      type: 'USER_LOGIN_REQUEST'\n    });\n    const config = {\n      headers: {\n        'Content-Type': 'application/json'\n      }\n    };\n    const {\n      data\n    } = await axios.post('/api/users/login', {\n      emailAddress,\n      password\n    }, config);\n    dispatch({\n      type: 'USER_LOGIN_SUCCESS',\n      payload: data\n    });\n    localStorage.setItem('userInfo', JSON.stringify(data));\n  } catch (error) {\n    dispatch({\n      type: 'USER_LOGIN_FAIL',\n      payload: error.response && error.response.data.message ? error.response.data.message : error.message\n    });\n  }\n};\nexport const register = ({\n  firstName,\n  lastName,\n  emailAddress,\n  password\n}) => async dispatch => {\n  try {\n    dispatch({\n      type: 'USER_REGISTER_REQUEST'\n    });\n    const config = {\n      headers: {\n        'Content-Type': 'application/json'\n      }\n    };\n    const {\n      data\n    } = await axios.post('/api/users/register', {\n      firstName,\n      lastName,\n      emailAddress,\n      password\n    }, config);\n    dispatch({\n      type: 'USER_REGISTER_SUCCESS',\n      payload: data\n    });\n    dispatch({\n      type: 'USER_LOGIN_SUCCESS',\n      payload: data\n    });\n    localStorage.setItem('userInfo', JSON.stringify(data));\n  } catch (error) {\n    dispatch({\n      type: 'USER_REGISTER_FAIL',\n      payload: error.response && error.response.data.message ? error.response.data.message : error.message\n    });\n  }\n};\nexport const logout = () => dispatch => {\n  localStorage.removeItem('userInfo');\n  dispatch({\n    type: 'USER_LOGOUT'\n  });\n};","map":{"version":3,"sources":["E:/CS-Dept.-automated-info.-timeline/sl/src/components/actions/userActions.js"],"names":["axios","listTweets","dispatch","type","data","get","payload","tweets","error","response","message","login","emailAddress","password","config","headers","post","localStorage","setItem","JSON","stringify","register","firstName","lastName","logout","removeItem"],"mappings":"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","sourcesContent":["import axios from 'axios'\r\n\r\nexport const listTweets = () => async (dispatch) => {\r\n  try {\r\n    dispatch({ type: 'TWEET_LIST_REQUEST' })\r\n\r\n    const { data } = await axios.get(\r\n      `https://baylor-board.herokuapp.com/tweets`\r\n    )\r\n\r\n    dispatch({\r\n      type: 'TWEET_LIST_SUCCESS',\r\n      payload: data.tweets,\r\n    })\r\n  } catch (error) {\r\n    dispatch({\r\n      type: 'TWEET_LIST_FAIL',\r\n      payload:\r\n        error.response && error.response.data.message\r\n          ? error.response.data.message\r\n          : error.message,\r\n    })\r\n  }\r\n}\r\n\r\n\r\n\r\n\r\n\r\nexport const login =\r\n  ({ emailAddress, password }) =>\r\n  async (dispatch) => {\r\n    try {\r\n      dispatch({\r\n        type: 'USER_LOGIN_REQUEST',\r\n      })\r\n\r\n      const config = {\r\n        headers: {\r\n          'Content-Type': 'application/json',\r\n        },\r\n      }\r\n\r\n      const { data } = await axios.post(\r\n        '/api/users/login',\r\n        { emailAddress, password },\r\n        config\r\n      )\r\n\r\n      dispatch({\r\n        type: 'USER_LOGIN_SUCCESS',\r\n        payload: data,\r\n      })\r\n\r\n      localStorage.setItem('userInfo', JSON.stringify(data))\r\n    } catch (error) {\r\n      dispatch({\r\n        type: 'USER_LOGIN_FAIL',\r\n        payload:\r\n          error.response && error.response.data.message\r\n            ? error.response.data.message\r\n            : error.message,\r\n      })\r\n    }\r\n  }\r\n\r\nexport const register =\r\n  ({ firstName, lastName, emailAddress, password }) =>\r\n  async (dispatch) => {\r\n    try {\r\n      dispatch({\r\n        type: 'USER_REGISTER_REQUEST',\r\n      })\r\n\r\n      const config = {\r\n        headers: {\r\n          'Content-Type': 'application/json',\r\n        },\r\n      }\r\n\r\n      const { data } = await axios.post(\r\n        '/api/users/register',\r\n        { firstName, lastName, emailAddress, password },\r\n        config\r\n      )\r\n\r\n      dispatch({\r\n        type: 'USER_REGISTER_SUCCESS',\r\n        payload: data,\r\n      })\r\n\r\n      dispatch({\r\n        type: 'USER_LOGIN_SUCCESS',\r\n        payload: data,\r\n      })\r\n\r\n      localStorage.setItem('userInfo', JSON.stringify(data))\r\n    } catch (error) {\r\n      dispatch({\r\n        type: 'USER_REGISTER_FAIL',\r\n        payload:\r\n          error.response && error.response.data.message\r\n            ? error.response.data.message\r\n            : error.message,\r\n      })\r\n    }\r\n  }\r\n\r\nexport const logout = () => (dispatch) => {\r\n  localStorage.removeItem('userInfo')\r\n  dispatch({ type: 'USER_LOGOUT' })\r\n}\r\n"]},"metadata":{},"sourceType":"module"}